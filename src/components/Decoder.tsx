import { Input, VStack, Text } from "@chakra-ui/react";
import { useState, useEffect } from "react";
import { decodeSmartSwap } from "../utils/decoder";
import { BigNumber } from "ethers";

type DataType = {
  fromToken: string;
  toToken: string;
  fromTokenAmount: string;
  minReturnAmount: string;
};

export default function Decoder() {
  const [calldata, setCalldata] = useState(
    "0xce8c431680000000000000000000000007882ae1ecb7429a84f1d53048d35c4bb205687700000000000000000000000022753e4264fddc6181dc7cce468904a80a363e44000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc00000000000000000000000007882ae1ecb7429a84f1d53048d35c4bb205687700000000000000000000000022753e4264fddc6181dc7cce468904a80a363e44000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000000000e043da61725000000000000000000000000000000000000000000000000000000000000626b7ca300000000000000000000000000000000000000000000000000000000626b7efb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000f32d39ff9f6aa7a7a64d7a4f00a54826ef791a5500000000000000000000000000000000000000000000000000000000000011119dabbfb5dd014984458e089d45e8f92a48052692fcb915cf2fc5c5079b1aac50305145f54a2c7e4169510a902782b8c65b5c1a27f573c0b3efa3bbb294eab19b1805f4960e161b272621c6f508c021e872eea207322aa500d1d3396cef32f9b072799e3b975cfe03cd8c60949787097b6b93a3bd80c4b244a7fa772cd0fc6b42"
  );
  const [decodedData, setDecodedData] = useState<DataType>({
    fromToken: "",
    toToken: "",
    fromTokenAmount: "",
    minReturnAmount: "",
  });
  useEffect(() => {
    if (calldata) {
      const decodedData = decodeSmartSwap(calldata);
      const encodedFromToken = BigNumber.from(
        decodedData.baseRequest.fromToken.toString()
      ).toHexString();
      const fromToken = "0x" + encodedFromToken.slice(-40);
      setDecodedData({
        fromToken,
        toToken: decodedData.baseRequest.toToken.toString(),
        fromTokenAmount: decodedData.baseRequest.fromTokenAmount.toString(),
        minReturnAmount: decodedData.baseRequest.minReturnAmount.toString(),
      });
    }
  }, [calldata]);

  return (
    <VStack>
      <Input
        placeholder="Calldata"
        // maxLength={5000}
        onChange={(e) => {
          setCalldata(e.currentTarget.value);
        }}
        w="1000px"
      />
      <Text> {`fromToken: ${decodedData.fromToken}`}</Text>
      <Text> {`toToken: ${decodedData.toToken}`}</Text>
      <Text> {`fromTokenAmount: ${decodedData.fromTokenAmount}`}</Text>
      <Text> {`minReturnAmount: ${decodedData.minReturnAmount}`}</Text>
    </VStack>
  );
}
